import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Icon from "@/components/ui/icon";

const Index = () => {
  const [playerStats, setPlayerStats] = useState({
    name: "–ê–∫–∏",
    level: 1,
    money: 5000,
    energy: 75,
    happiness: 65,
    charisma: 45,
    business: 30,
    experience: 250,
    nextLevelExp: 500,
  });

  const [currentLocation, setCurrentLocation] = useState("home");

  const locations = [
    {
      id: "home",
      name: "–î–æ–º",
      icon: "Home",
      description: "–û—Ç–¥–æ—Ö–Ω–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ —Å–∏–ª—ã",
    },
    {
      id: "work",
      name: "–†–∞–±–æ—Ç–∞",
      icon: "Briefcase",
      description: "–ó–∞—Ä–∞–±–æ—Ç–∞–π –¥–µ–Ω—å–≥–∏",
    },
    {
      id: "shop",
      name: "–ú–∞–≥–∞–∑–∏–Ω",
      icon: "ShoppingCart",
      description: "–ü–æ–∫—É–ø–∞–π –Ω—É–∂–Ω—ã–µ –≤–µ—â–∏",
    },
    {
      id: "street",
      name: "–£–ª–∏—Ü–∞",
      icon: "MapPin",
      description: "–ó–Ω–∞–∫–æ–º—å—Å—è —Å –ª—é–¥—å–º–∏",
    },
    {
      id: "business",
      name: "–ë–∏–∑–Ω–µ—Å",
      icon: "TrendingUp",
      description: "–°–æ–∑–¥–∞–π —Å–≤–æ–π –±–∏–∑–Ω–µ—Å",
    },
  ];

  const jobs = [
    { id: "cafe", name: "–ö–∞—Ñ–µ", pay: 500, time: "2 —á–∞—Å–∞", energy: -20 },
    { id: "office", name: "–û—Ñ–∏—Å", pay: 800, time: "4 —á–∞—Å–∞", energy: -30 },
    { id: "delivery", name: "–î–æ—Å—Ç–∞–≤–∫–∞", pay: 600, time: "3 —á–∞—Å–∞", energy: -25 },
  ];

  const shops = [
    { id: "food", name: "–ï–¥–∞", price: 200, effect: "+20 —ç–Ω–µ—Ä–≥–∏–∏" },
    { id: "clothes", name: "–û–¥–µ–∂–¥–∞", price: 1000, effect: "+5 —Ö–∞—Ä–∏–∑–º—ã" },
    { id: "car", name: "–ú–∞—à–∏–Ω–∞", price: 25000, effect: "+10 —Å—Ç–∞—Ç—É—Å–∞" },
  ];

  const handleWork = (job: any) => {
    setPlayerStats((prev) => ({
      ...prev,
      money: prev.money + job.pay,
      energy: Math.max(0, prev.energy + job.energy),
      experience: prev.experience + 50,
    }));
  };

  const handlePurchase = (item: any) => {
    if (playerStats.money >= item.price) {
      setPlayerStats((prev) => ({
        ...prev,
        money: prev.money - item.price,
        energy:
          item.id === "food" ? Math.min(100, prev.energy + 20) : prev.energy,
        charisma: item.id === "clothes" ? prev.charisma + 5 : prev.charisma,
      }));
    }
  };

  const renderLocationContent = () => {
    switch (currentLocation) {
      case "home":
        return (
          <div className="space-y-4">
            <h3 className="text-2xl font-bold text-anime-purple">üè† –ú–æ–π –¥–æ–º</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card className="border-anime-pink/20">
                <CardHeader>
                  <CardTitle className="text-anime-pink">–û—Ç–¥—ã—Ö</CardTitle>
                  <CardDescription>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ —ç–Ω–µ—Ä–≥–∏—é</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() =>
                      setPlayerStats((prev) => ({
                        ...prev,
                        energy: Math.min(100, prev.energy + 30),
                      }))
                    }
                    className="w-full bg-anime-pink hover:bg-anime-pink/90"
                  >
                    –û—Ç–¥–æ—Ö–Ω—É—Ç—å (+30 —ç–Ω–µ—Ä–≥–∏–∏)
                  </Button>
                </CardContent>
              </Card>
              <Card className="border-anime-blue/20">
                <CardHeader>
                  <CardTitle className="text-anime-blue">–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</CardTitle>
                  <CardDescription>–ü–æ–≤—ã—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() =>
                      setPlayerStats((prev) => ({
                        ...prev,
                        happiness: Math.min(100, prev.happiness + 20),
                      }))
                    }
                    className="w-full bg-anime-blue hover:bg-anime-blue/90"
                  >
                    –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ (+20 —Å—á–∞—Å—Ç—å—è)
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        );

      case "work":
        return (
          <div className="space-y-4">
            <h3 className="text-2xl font-bold text-anime-purple">üíº –†–∞–±–æ—Ç–∞</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {jobs.map((job) => (
                <Card key={job.id} className="border-anime-yellow/20">
                  <CardHeader>
                    <CardTitle className="text-anime-yellow">
                      {job.name}
                    </CardTitle>
                    <CardDescription>–í—Ä–µ–º—è: {job.time}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <p className="text-green-600">+{job.pay}¬•</p>
                      <p className="text-red-500">{job.energy} —ç–Ω–µ—Ä–≥–∏–∏</p>
                      <Button
                        onClick={() => handleWork(job)}
                        disabled={playerStats.energy < Math.abs(job.energy)}
                        className="w-full bg-anime-yellow hover:bg-anime-yellow/90 text-white"
                      >
                        –†–∞–±–æ—Ç–∞—Ç—å
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case "shop":
        return (
          <div className="space-y-4">
            <h3 className="text-2xl font-bold text-anime-purple">üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {shops.map((item) => (
                <Card key={item.id} className="border-anime-pink/20">
                  <CardHeader>
                    <CardTitle className="text-anime-pink">
                      {item.name}
                    </CardTitle>
                    <CardDescription>{item.effect}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <p className="text-red-600">{item.price}¬•</p>
                      <Button
                        onClick={() => handlePurchase(item)}
                        disabled={playerStats.money < item.price}
                        className="w-full bg-anime-pink hover:bg-anime-pink/90"
                      >
                        –ö—É–ø–∏—Ç—å
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case "street":
        return (
          <div className="space-y-4">
            <h3 className="text-2xl font-bold text-anime-purple">üö∂ –£–ª–∏—Ü–∞</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card className="border-anime-blue/20">
                <CardHeader>
                  <CardTitle className="text-anime-blue">–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞</CardTitle>
                  <CardDescription>–ù–∞–π–¥–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() =>
                      setPlayerStats((prev) => ({
                        ...prev,
                        charisma: prev.charisma + 2,
                        happiness: prev.happiness + 10,
                      }))
                    }
                    className="w-full bg-anime-blue hover:bg-anime-blue/90"
                  >
                    –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è (+2 —Ö–∞—Ä–∏–∑–º—ã)
                  </Button>
                </CardContent>
              </Card>
              <Card className="border-anime-pink/20">
                <CardHeader>
                  <CardTitle className="text-anime-pink">–§–ª–∏—Ä—Ç</CardTitle>
                  <CardDescription>–£–ª—É—á—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() =>
                      setPlayerStats((prev) => ({
                        ...prev,
                        charisma: prev.charisma + 3,
                        happiness: prev.happiness + 15,
                      }))
                    }
                    disabled={playerStats.charisma < 20}
                    className="w-full bg-anime-pink hover:bg-anime-pink/90"
                  >
                    –§–ª–∏—Ä—Ç–æ–≤–∞—Ç—å (–Ω—É–∂–Ω–æ 20 —Ö–∞—Ä–∏–∑–º—ã)
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        );

      case "business":
        return (
          <div className="space-y-4">
            <h3 className="text-2xl font-bold text-anime-purple">üìà –ë–∏–∑–Ω–µ—Å</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card className="border-anime-yellow/20">
                <CardHeader>
                  <CardTitle className="text-anime-yellow">
                    –°–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å
                  </CardTitle>
                  <CardDescription>–ù–∞—á–Ω–∏ —Å–≤–æ–µ –¥–µ–ª–æ</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() =>
                      setPlayerStats((prev) => ({
                        ...prev,
                        money: prev.money - 10000,
                        business: prev.business + 20,
                      }))
                    }
                    disabled={playerStats.money < 10000}
                    className="w-full bg-anime-yellow hover:bg-anime-yellow/90 text-white"
                  >
                    –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ñ–µ (10000¬•)
                  </Button>
                </CardContent>
              </Card>
              <Card className="border-anime-blue/20">
                <CardHeader>
                  <CardTitle className="text-anime-blue">–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</CardTitle>
                  <CardDescription>–í–ª–æ–∂–∏ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–±—ã–ª—å</CardDescription>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() =>
                      setPlayerStats((prev) => ({
                        ...prev,
                        money:
                          prev.money + Math.floor(Math.random() * 2000) + 500,
                      }))
                    }
                    disabled={playerStats.money < 5000}
                    className="w-full bg-anime-blue hover:bg-anime-blue/90"
                  >
                    –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å (5000¬•)
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-anime-pink/10 via-anime-blue/10 to-anime-yellow/10">
      <div className="container mx-auto p-4">
        {/* Header with Character Stats */}
        <div className="mb-6">
          <Card className="bg-white/90 backdrop-blur-sm border-anime-purple/20 shadow-lg">
            <CardHeader>
              <div className="flex items-center space-x-4">
                <Avatar className="w-20 h-20 border-4 border-anime-pink">
                  <AvatarImage
                    src="/img/601745cd-a16b-4f7a-9944-9ebb68552257.jpg"
                    alt="Character"
                  />
                  <AvatarFallback className="bg-anime-pink text-white text-2xl">
                    –ê–∫–∏
                  </AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <h1 className="text-3xl font-bold text-anime-purple">
                      {playerStats.name}
                    </h1>
                    <Badge
                      variant="secondary"
                      className="bg-anime-yellow text-white"
                    >
                      –£—Ä–æ–≤–µ–Ω—å {playerStats.level}
                    </Badge>
                  </div>
                  <div className="flex items-center space-x-4 text-lg">
                    <div className="flex items-center space-x-1">
                      <Icon name="Coins" className="text-anime-yellow" />
                      <span className="font-semibold">
                        {playerStats.money}¬•
                      </span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Icon name="Zap" className="text-anime-blue" />
                      <span>{playerStats.energy}/100</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Icon name="Heart" className="text-anime-pink" />
                      <span>{playerStats.happiness}/100</span>
                    </div>
                  </div>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div>
                  <div className="flex justify-between mb-1">
                    <span className="text-sm text-anime-blue">–≠–Ω–µ—Ä–≥–∏—è</span>
                    <span className="text-sm">{playerStats.energy}/100</span>
                  </div>
                  <Progress value={playerStats.energy} className="h-2" />
                </div>
                <div>
                  <div className="flex justify-between mb-1">
                    <span className="text-sm text-anime-pink">–°—á–∞—Å—Ç—å–µ</span>
                    <span className="text-sm">{playerStats.happiness}/100</span>
                  </div>
                  <Progress value={playerStats.happiness} className="h-2" />
                </div>
                <div>
                  <div className="flex justify-between mb-1">
                    <span className="text-sm text-anime-yellow">–•–∞—Ä–∏–∑–º–∞</span>
                    <span className="text-sm">{playerStats.charisma}/100</span>
                  </div>
                  <Progress value={playerStats.charisma} className="h-2" />
                </div>
                <div>
                  <div className="flex justify-between mb-1">
                    <span className="text-sm text-anime-purple">–ë–∏–∑–Ω–µ—Å</span>
                    <span className="text-sm">{playerStats.business}/100</span>
                  </div>
                  <Progress value={playerStats.business} className="h-2" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Navigation */}
        <div className="mb-6">
          <div className="flex flex-wrap gap-2">
            {locations.map((location) => (
              <Button
                key={location.id}
                variant={
                  currentLocation === location.id ? "default" : "outline"
                }
                onClick={() => setCurrentLocation(location.id)}
                className={`flex items-center space-x-2 ${
                  currentLocation === location.id
                    ? "bg-anime-purple text-white"
                    : "border-anime-purple/30 text-anime-purple hover:bg-anime-purple/10"
                }`}
              >
                <Icon name={location.icon as any} size={16} />
                <span>{location.name}</span>
              </Button>
            ))}
          </div>
        </div>

        {/* Main Content */}
        <div className="mb-6">
          <Card className="bg-white/90 backdrop-blur-sm border-anime-purple/20 shadow-lg">
            <CardContent className="p-6">{renderLocationContent()}</CardContent>
          </Card>
        </div>

        {/* Footer */}
        <div className="text-center text-anime-purple/60">
          <p>üéÆ RPG Life Sim - –°–æ–∑–¥–∞–π —Å–≤–æ—é –∂–∏–∑–Ω—å! üöÄ</p>
        </div>
      </div>
    </div>
  );
};

export default Index;
